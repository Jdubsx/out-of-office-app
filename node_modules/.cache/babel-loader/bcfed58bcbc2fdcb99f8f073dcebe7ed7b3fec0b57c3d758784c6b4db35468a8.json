{"ast":null,"code":"/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n/**\n * @class\n * @implements MiddlewareOptions\n * Class for RetryHandlerOptions\n */\nexport class RetryHandlerOptions {\n  /**\n   * @public\n   * @constructor\n   * To create an instance of RetryHandlerOptions\n   * @param {number} [delay = RetryHandlerOptions.DEFAULT_DELAY] - The delay value in seconds\n   * @param {number} [maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES] - The maxRetries value\n   * @param {ShouldRetry} [shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY] - The shouldRetry callback function\n   * @returns An instance of RetryHandlerOptions\n   */\n  constructor(delay = RetryHandlerOptions.DEFAULT_DELAY, maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES, shouldRetry = RetryHandlerOptions.defaultShouldRetry) {\n    if (delay > RetryHandlerOptions.MAX_DELAY && maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n      const error = new Error(`Delay and MaxRetries should not be more than ${RetryHandlerOptions.MAX_DELAY} and ${RetryHandlerOptions.MAX_MAX_RETRIES}`);\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    } else if (delay > RetryHandlerOptions.MAX_DELAY) {\n      const error = new Error(`Delay should not be more than ${RetryHandlerOptions.MAX_DELAY}`);\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    } else if (maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n      const error = new Error(`MaxRetries should not be more than ${RetryHandlerOptions.MAX_MAX_RETRIES}`);\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    } else if (delay < 0 && maxRetries < 0) {\n      const error = new Error(`Delay and MaxRetries should not be negative`);\n      error.name = \"MinExpectationNotMet\";\n      throw error;\n    } else if (delay < 0) {\n      const error = new Error(`Delay should not be negative`);\n      error.name = \"MinExpectationNotMet\";\n      throw error;\n    } else if (maxRetries < 0) {\n      const error = new Error(`MaxRetries should not be negative`);\n      error.name = \"MinExpectationNotMet\";\n      throw error;\n    }\n    this.delay = Math.min(delay, RetryHandlerOptions.MAX_DELAY);\n    this.maxRetries = Math.min(maxRetries, RetryHandlerOptions.MAX_MAX_RETRIES);\n    this.shouldRetry = shouldRetry;\n  }\n  /**\n   * @public\n   * To get the maximum delay\n   * @returns A maximum delay\n   */\n  getMaxDelay() {\n    return RetryHandlerOptions.MAX_DELAY;\n  }\n}\n/**\n * @private\n * @static\n * A member holding default delay value in seconds\n */\nRetryHandlerOptions.DEFAULT_DELAY = 3;\n/**\n * @private\n * @static\n * A member holding default maxRetries value\n */\nRetryHandlerOptions.DEFAULT_MAX_RETRIES = 3;\n/**\n * @private\n * @static\n * A member holding maximum delay value in seconds\n */\nRetryHandlerOptions.MAX_DELAY = 180;\n/**\n * @private\n * @static\n * A member holding maximum maxRetries value\n */\nRetryHandlerOptions.MAX_MAX_RETRIES = 10;\n/**\n * @private\n * A member holding default shouldRetry callback\n */\nRetryHandlerOptions.defaultShouldRetry = () => true;","map":{"version":3,"names":["RetryHandlerOptions","constructor","delay","DEFAULT_DELAY","maxRetries","DEFAULT_MAX_RETRIES","shouldRetry","defaultShouldRetry","MAX_DELAY","MAX_MAX_RETRIES","error","Error","name","Math","min","getMaxDelay"],"sources":["C:\\Users\\j.wenzel\\Documents\\Programming\\Out of Office App\\node_modules\\@microsoft\\microsoft-graph-client\\src\\middleware\\options\\RetryHandlerOptions.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * @module RetryHandlerOptions\n */\n\nimport { FetchOptions } from \"../../IFetchOptions\";\nimport { MiddlewareOptions } from \"./IMiddlewareOptions\";\n\n/**\n * @type\n * A type declaration for shouldRetry callback\n */\nexport type ShouldRetry = (delay: number, attempt: number, request: RequestInfo, options: FetchOptions | undefined, response: Response) => boolean;\n\n/**\n * @class\n * @implements MiddlewareOptions\n * Class for RetryHandlerOptions\n */\n\nexport class RetryHandlerOptions implements MiddlewareOptions {\n\t/**\n\t * @private\n\t * @static\n\t * A member holding default delay value in seconds\n\t */\n\tprivate static DEFAULT_DELAY = 3;\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding default maxRetries value\n\t */\n\tprivate static DEFAULT_MAX_RETRIES = 3;\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding maximum delay value in seconds\n\t */\n\tprivate static MAX_DELAY = 180;\n\n\t/**\n\t * @private\n\t * @static\n\t * A member holding maximum maxRetries value\n\t */\n\tprivate static MAX_MAX_RETRIES = 10;\n\n\t/**\n\t * @public\n\t * A member holding delay value in seconds\n\t */\n\tpublic delay: number;\n\n\t/**\n\t * @public\n\t * A member holding maxRetries value\n\t */\n\tpublic maxRetries: number;\n\n\t/**\n\t * @public\n\t * A member holding shouldRetry callback\n\t */\n\tpublic shouldRetry: ShouldRetry;\n\n\t/**\n\t * @private\n\t * A member holding default shouldRetry callback\n\t */\n\tprivate static defaultShouldRetry: ShouldRetry = () => true;\n\n\t/**\n\t * @public\n\t * @constructor\n\t * To create an instance of RetryHandlerOptions\n\t * @param {number} [delay = RetryHandlerOptions.DEFAULT_DELAY] - The delay value in seconds\n\t * @param {number} [maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES] - The maxRetries value\n\t * @param {ShouldRetry} [shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY] - The shouldRetry callback function\n\t * @returns An instance of RetryHandlerOptions\n\t */\n\tpublic constructor(delay: number = RetryHandlerOptions.DEFAULT_DELAY, maxRetries: number = RetryHandlerOptions.DEFAULT_MAX_RETRIES, shouldRetry: ShouldRetry = RetryHandlerOptions.defaultShouldRetry) {\n\t\tif (delay > RetryHandlerOptions.MAX_DELAY && maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n\t\t\tconst error = new Error(`Delay and MaxRetries should not be more than ${RetryHandlerOptions.MAX_DELAY} and ${RetryHandlerOptions.MAX_MAX_RETRIES}`);\n\t\t\terror.name = \"MaxLimitExceeded\";\n\t\t\tthrow error;\n\t\t} else if (delay > RetryHandlerOptions.MAX_DELAY) {\n\t\t\tconst error = new Error(`Delay should not be more than ${RetryHandlerOptions.MAX_DELAY}`);\n\t\t\terror.name = \"MaxLimitExceeded\";\n\t\t\tthrow error;\n\t\t} else if (maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n\t\t\tconst error = new Error(`MaxRetries should not be more than ${RetryHandlerOptions.MAX_MAX_RETRIES}`);\n\t\t\terror.name = \"MaxLimitExceeded\";\n\t\t\tthrow error;\n\t\t} else if (delay < 0 && maxRetries < 0) {\n\t\t\tconst error = new Error(`Delay and MaxRetries should not be negative`);\n\t\t\terror.name = \"MinExpectationNotMet\";\n\t\t\tthrow error;\n\t\t} else if (delay < 0) {\n\t\t\tconst error = new Error(`Delay should not be negative`);\n\t\t\terror.name = \"MinExpectationNotMet\";\n\t\t\tthrow error;\n\t\t} else if (maxRetries < 0) {\n\t\t\tconst error = new Error(`MaxRetries should not be negative`);\n\t\t\terror.name = \"MinExpectationNotMet\";\n\t\t\tthrow error;\n\t\t}\n\t\tthis.delay = Math.min(delay, RetryHandlerOptions.MAX_DELAY);\n\t\tthis.maxRetries = Math.min(maxRetries, RetryHandlerOptions.MAX_MAX_RETRIES);\n\t\tthis.shouldRetry = shouldRetry;\n\t}\n\n\t/**\n\t * @public\n\t * To get the maximum delay\n\t * @returns A maximum delay\n\t */\n\tpublic getMaxDelay(): number {\n\t\treturn RetryHandlerOptions.MAX_DELAY;\n\t}\n}\n"],"mappings":"AAAA;;;;;;AAoBA;;;;;AAMA,OAAM,MAAOA,mBAAmB;EAqD/B;;;;;;;;;EASAC,YAAmBC,KAAA,GAAgBF,mBAAmB,CAACG,aAAa,EAAEC,UAAA,GAAqBJ,mBAAmB,CAACK,mBAAmB,EAAEC,WAAA,GAA2BN,mBAAmB,CAACO,kBAAkB;IACpM,IAAIL,KAAK,GAAGF,mBAAmB,CAACQ,SAAS,IAAIJ,UAAU,GAAGJ,mBAAmB,CAACS,eAAe,EAAE;MAC9F,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,gDAAgDX,mBAAmB,CAACQ,SAAS,QAAQR,mBAAmB,CAACS,eAAe,EAAE,CAAC;MACnJC,KAAK,CAACE,IAAI,GAAG,kBAAkB;MAC/B,MAAMF,KAAK;KACX,MAAM,IAAIR,KAAK,GAAGF,mBAAmB,CAACQ,SAAS,EAAE;MACjD,MAAME,KAAK,GAAG,IAAIC,KAAK,CAAC,iCAAiCX,mBAAmB,CAACQ,SAAS,EAAE,CAAC;MACzFE,KAAK,CAACE,IAAI,GAAG,kBAAkB;MAC/B,MAAMF,KAAK;KACX,MAAM,IAAIN,UAAU,GAAGJ,mBAAmB,CAACS,eAAe,EAAE;MAC5D,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,sCAAsCX,mBAAmB,CAACS,eAAe,EAAE,CAAC;MACpGC,KAAK,CAACE,IAAI,GAAG,kBAAkB;MAC/B,MAAMF,KAAK;KACX,MAAM,IAAIR,KAAK,GAAG,CAAC,IAAIE,UAAU,GAAG,CAAC,EAAE;MACvC,MAAMM,KAAK,GAAG,IAAIC,KAAK,CAAC,6CAA6C,CAAC;MACtED,KAAK,CAACE,IAAI,GAAG,sBAAsB;MACnC,MAAMF,KAAK;KACX,MAAM,IAAIR,KAAK,GAAG,CAAC,EAAE;MACrB,MAAMQ,KAAK,GAAG,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACvDD,KAAK,CAACE,IAAI,GAAG,sBAAsB;MACnC,MAAMF,KAAK;KACX,MAAM,IAAIN,UAAU,GAAG,CAAC,EAAE;MAC1B,MAAMM,KAAK,GAAG,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MAC5DD,KAAK,CAACE,IAAI,GAAG,sBAAsB;MACnC,MAAMF,KAAK;;IAEZ,IAAI,CAACR,KAAK,GAAGW,IAAI,CAACC,GAAG,CAACZ,KAAK,EAAEF,mBAAmB,CAACQ,SAAS,CAAC;IAC3D,IAAI,CAACJ,UAAU,GAAGS,IAAI,CAACC,GAAG,CAACV,UAAU,EAAEJ,mBAAmB,CAACS,eAAe,CAAC;IAC3E,IAAI,CAACH,WAAW,GAAGA,WAAW;EAC/B;EAEA;;;;;EAKOS,WAAWA,CAAA;IACjB,OAAOf,mBAAmB,CAACQ,SAAS;EACrC;;AAnGA;;;;;AAKeR,mBAAA,CAAAG,aAAa,GAAG,CAAC;AAEhC;;;;;AAKeH,mBAAA,CAAAK,mBAAmB,GAAG,CAAC;AAEtC;;;;;AAKeL,mBAAA,CAAAQ,SAAS,GAAG,GAAG;AAE9B;;;;;AAKeR,mBAAA,CAAAS,eAAe,GAAG,EAAE;AAoBnC;;;;AAIeT,mBAAA,CAAAO,kBAAkB,GAAgB,MAAM,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}